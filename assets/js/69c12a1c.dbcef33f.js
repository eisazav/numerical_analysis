"use strict";(self.webpackChunkanalisis=self.webpackChunkanalisis||[]).push([[409],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5569:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l="Jacobi",c={unversionedId:"LinearEquations/Iteratives/Jacobi",id:"LinearEquations/Iteratives/Jacobi",isDocsHomePage:!1,title:"Jacobi",description:"Normal",source:"@site/docs/LinearEquations/Iteratives/Jacobi.md",sourceDirName:"LinearEquations/Iteratives",slug:"/LinearEquations/Iteratives/Jacobi",permalink:"/numerical_analysis/docs/LinearEquations/Iteratives/Jacobi",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/LinearEquations/Iteratives/Jacobi.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Gauss Seidel",permalink:"/numerical_analysis/docs/LinearEquations/Iteratives/gausSeidel"},next:{title:"About this section",permalink:"/numerical_analysis/docs/Interpolation/about"}},u=[{value:"Normal",id:"normal",children:[],level:2},{value:"Relaxation",id:"relaxation",children:[],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"jacobi"},"Jacobi"),(0,a.kt)("h2",{id:"normal"},"Normal"),(0,a.kt)("p",null,"The Jacobi method is an iterative algorithm for determining the solutions of a strictly diagonally dominant system of linear equations. Each diagonal element is solved for, and an approximate value is plugged in. The process is then iterated until it converges. This algorithm is a stripped-down version of the Jacobi transformation method of matrix diagonalization. The method is named after Carl Gustav Jacob Jacobi."),(0,a.kt)("h2",{id:"relaxation"},"Relaxation"),(0,a.kt)("p",null,"This method aims to improve the convergence of the Jacobi method, with which it is possible to find the approximations to a solution of systems of linear equations using the initial values for the first approximation, then those of the first for the second and so on; in this method the calculation of each variable is independent (no variable depends on the other)."),(0,a.kt)("p",null,"To apply the method, the following strategy must be taken into account:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Enter the input parameters of the method: initial approximations, coefficient matrix, vector of independent terms, a tolerance, a maximum number of iterations and the relaxation coefficient.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"With the initial approximations the new approximations are found taking into account the same process used in the Jacobi method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"At each stage, the measure of the dispersion (error) between the\ncurrent and previous approximation. This is calculated using the Euclidean norm."))))}m.isMDXComponent=!0}}]);